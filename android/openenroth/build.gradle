def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    if ( file("keystore/android_keystore.jks").exists() ) {
        signingConfigs {
            debug {
                storeFile = file("keystore/android_keystore.jks")
                storePassword System.getenv("SIGNING_STORE_PASSWORD")
                keyAlias System.getenv("SIGNING_KEY_ALIAS")
                keyPassword System.getenv("SIGNING_KEY_PASSWORD")
            }
            release {
                storeFile = file("keystore/android_keystore.jks")
                storePassword System.getenv("SIGNING_STORE_PASSWORD")
                keyAlias System.getenv("SIGNING_KEY_ALIAS")
                keyPassword System.getenv("SIGNING_KEY_PASSWORD")
            }
        }
    }
    compileSdkVersion 31
    ndkVersion "26.0.10636728"
    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.openenroth.game"
        }
        minSdkVersion 16
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            if ( System.env['GITHUBARCH'] == "universal" || System.env['GITHUBARCH'] == null) {
                cmake {
                    arguments "-DANDROID_STL=c++_static", "-DOE_BUILD_TESTS=OFF"
                    abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64', 'x86'
                    version "3.24.0+"
                }
            } else {
                cmake {
                    arguments "-DANDROID_STL=c++_static", "-DOE_BUILD_TESTS=OFF"
                    abiFilters System.env['GITHUBARCH']
                    version "3.24.0+"
                }
            }
        }
       if ( file("keystore/android_keystore.jks").exists() ) {
          signingConfig signingConfigs.release
       }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lint {
        abortOnError false
    }
    namespace 'org.openenroth.game'
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                path 'jni/CMakeLists.txt'
                version "3.24.0+"
            }
        }
    }
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.openenroth.game.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
