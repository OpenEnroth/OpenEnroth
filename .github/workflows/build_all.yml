name: Build

on:
  pull_request: null
  workflow_dispatch:
    inputs:
      myCommit:
        description: Commit SHA1
        required: false
        default: ''
        type: string
      releaseTag:
        description: Release tag
        required: false
        default: ''
        type: string
  workflow_call:
    inputs:
      myCommit:
        description: Commit SHA1
        required: false
        default: ''
        type: string
      releaseTag:
        description: Release tag
        required: false
        default: ''
        type: string
  release:
    types:
      - published

env:
  # This version is referenced in android/openenroth/build.gradle.
  # When updating the version here you should also update it in the Dependencies repo!
  NDK_VERSION: 28.1.13356709
  CCACHE_COMPILERCHECK: content

jobs:
  build_all:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - Debug
          - RelWithDebInfo
        target:
          - windows_x86
          - windows_x86_64
          - darwin_arm64
          - darwin_x86_64
          - linux_x86
          - linux_x86_64
          - android_universal
          - android_arm64_v8a
          - android_arm32_v7a
          - android_x86_64
        include:
          - {target: windows_x86,       platform: windows,  architecture: x86,          os: windows-2022, ccache_architecture: x86,       ccache_size: 400M}
          - {target: windows_x86_64,    platform: windows,  architecture: x86_64,       os: windows-2022, ccache_architecture: x86_64,    ccache_size: 400M}
          - {target: darwin_arm64,      platform: darwin,   architecture: arm64,        os: macos-15,     ccache_architecture: arm64,     ccache_size: 400M}
          - {target: darwin_x86_64,     platform: darwin,   architecture: x86_64,       os: macos-15,     ccache_architecture: x86_64,    ccache_size: 400M}
          - {target: linux_x86,         platform: linux,    architecture: x86,          os: ubuntu-24.04, ccache_architecture: x86,       ccache_size: 400M}
          - {target: linux_x86_64,      platform: linux,    architecture: x86_64,       os: ubuntu-24.04, ccache_architecture: x86_64,    ccache_size: 400M}
          - {target: android_universal, platform: android,  architecture: universal,    os: ubuntu-24.04, ccache_architecture: universal, ccache_size: 800M}
          - {target: android_arm64_v8a, platform: android,  architecture: arm64-v8a,    os: ubuntu-24.04, ccache_architecture: universal, ccache_size: 800M}
          - {target: android_arm32_v7a, platform: android,  architecture: armeabi-v7a,  os: ubuntu-24.04, ccache_architecture: universal, ccache_size: 800M}
          - {target: android_x86_64,    platform: android,  architecture: x86_64,       os: ubuntu-24.04, ccache_architecture: universal, ccache_size: 800M}
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: bash
    # Android conditional logic: only build universal when releaseTag is set, others when it's not
    #if: ${{matrix.platform != 'android' || (inputs.releaseTag != '' && matrix.target == 'android_universal') || (inputs.releaseTag == '' && matrix.target != 'android_universal')}}
    steps:
      - name: '[linux/android] Configure fast APT mirror'
        if: matrix.platform == 'linux' || matrix.platform == 'android'
        uses: vegardit/fast-apt-mirror.sh@v1

      - name: '[darwin] Set up Xcode'
        if: matrix.platform == 'darwin'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 16.3

      - name: 'Checkout'
        uses: actions/checkout@v5.0.0
        with:
          submodules: recursive
          ref: '${{inputs.myCommit}}'

      # Note that secrets are not passed to actions triggered by PRs, so this step will be skipped for PRs.
      - name: '[android] Decode keystore'
        if: matrix.platform == 'android' && env.SECRETS_KEYSTORE != ''
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2.4
        with:
          fileName: android_keystore.jks
          encodedString: '${{env.SECRETS_KEYSTORE}}'
        env:
          # Secrets cannot be referenced in if: blocks, so we have to work it around.
          SECRETS_KEYSTORE: '${{secrets.KEYSTORE}}'

      - name: '[android] Install NDK'
        if: matrix.platform == 'android'
        run: |
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "ndk;$NDK_VERSION"

      # We need gcc-multilib for host-side tools (luajit's buildvm) when building for armeabi-v7a. Why? No idea.
      - name: '[android] Install dependencies'
        if: matrix.platform == 'android'
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          attempt_delay: 5000
          command: |
            if [[ "${{matrix.architecture}}" = "universal" || "${{matrix.architecture}}" = "armeabi-v7a" ]]; then
              sudo apt-get update
              sudo apt-get install -y gcc-13-multilib g++-13-multilib
            fi

      - name: '[android] Setup Java'
        if: matrix.platform == 'android'
        uses: actions/setup-java@v5.0.0
        with:
          distribution: temurin
          java-version: 17.0.6

      - name: '[linux] Install dependencies'
        if: matrix.platform == 'linux'
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          attempt_delay: 5000
          command: |
            if [ "${{matrix.architecture}}" = "x86" ]; then
              sudo dpkg --add-architecture i386
            fi
            sudo apt-get update
            if [ "${{matrix.architecture}}" = "x86" ]; then
              sudo apt-get install -y gcc-14-multilib g++-14-multilib lld
              sudo apt-get install -y libglu1-mesa-dev:i386
              sudo apt-get install -y aptitude
              sudo apt-get install -y libdwarf-dev:i386 libelf-dev:i386
            fi
            if [ "${{matrix.architecture}}" = "x86_64" ]; then
              sudo apt-get install -y gcc-14 g++-14 lld
              sudo apt-get install -y libglu1-mesa-dev
              sudo apt-get install -y libdwarf-dev libelf-dev
            fi

      - name: '[windows] Setup MSVC environment'
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: '${{matrix.architecture}}'

      - name: '[darwin/windows/linux] Restore data cache'
        if: matrix.platform != 'android'
        id: restore_data_cache
        uses: actions/cache/restore@v4.2.4
        with:
          path: |
            OpenEnroth_GameData
          key: data-cache
          enableCrossOsArchive: ${{matrix.platform == 'windows'}}

      - name: 'Run ccache'
        uses: hendrikmuhs/ccache-action@v1.2.18
        with:
          key: '${{matrix.platform}}-${{matrix.configuration}}-${{matrix.ccache_architecture}}'
          verbose: 2
          max-size: ${{matrix.ccache_size}}
          save: ${{github.event_name != 'pull_request'}}

      - name: '[windows] Configure ccache'
        if: matrix.platform == 'windows'
        run: |
          ccache --set-config=hash_dir=false

      - name: '[darwin] Configure'
        if: matrix.platform == 'darwin'
        run: |
          if [ "${{matrix.architecture}}" = "x86_64" ]; then
            export MACOSX_DEPLOYMENT_TARGET="10.15"
          fi
          if [ "${{matrix.architecture}}" = "arm64" ]; then
            export MACOSX_DEPLOYMENT_TARGET="11"
          fi
          cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=${{matrix.configuration}} -DCMAKE_OSX_ARCHITECTURES=${{matrix.architecture}} -DNIGHTLY=ON

      - name: '[windows] Configure'
        if: matrix.platform == 'windows'
        run: |
          cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=${{matrix.configuration}} -DNIGHTLY=ON

      - name: '[linux] Configure'
        if: matrix.platform == 'linux'
        run: |
          if [ "${{matrix.architecture}}" = "x86" ]; then
            export CFLAGS="-m32" CXXFLAGS="-m32" 
          fi
          export CC=gcc-14 && export CXX=g++-14
          cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=${{matrix.configuration}} -DNIGHTLY=ON

      - name: '[darwin/windows/linux] Build'
        if: matrix.platform != 'android'
        working-directory: build
        run: |
          ninja -v

      - name: '[android] Build'
        if: matrix.platform == 'android'
        uses: burrunan/gradle-cache-action@v3.0.1
        with:
          build-root-directory: android
          job-id: android-${{matrix.configuration == 'RelWithDebInfo' && 'Release' || matrix.configuration}}
          arguments: assemble${{matrix.configuration == 'RelWithDebInfo' && 'Release' || matrix.configuration}} --info -Pandroid.native.buildOutput=verbose
          read-only: ${{ github.event_name == 'pull_request' }}
        env:
          SIGNING_KEYSTORE: '${{steps.decode_keystore.outputs.filePath}}'
          SIGNING_KEY_ALIAS: '${{secrets.SIGNING_KEY_ALIAS}}'
          SIGNING_KEY_PASSWORD: '${{secrets.SIGNING_KEY_PASSWORD}}'
          SIGNING_STORE_PASSWORD: '${{secrets.SIGNING_STORE_PASSWORD}}'
          CMAKE_BUILD_PARALLEL_LEVEL: 4
          GITHUBARCH: '${{matrix.architecture}}'

      - name: '[darwin/windows/linux] Run unit tests'
        if: matrix.platform != 'android'
        working-directory: build
        run: |
          ninja Run_UnitTest

      - name: '[darwin/windows/linux] Run game tests'
        if: matrix.platform != 'android'
        working-directory: build
        run: |
          ninja Run_GameTest_Headless_Parallel
        env:
          OPENENROTH_MM7_PATH: ${{github.workspace}}/OpenEnroth_GameData/mm7

      - name: '[darwin/windows/linux] Run retrace tests'
        if: matrix.platform != 'android' && matrix.configuration != 'Debug'
        working-directory: build
        run: |
          ninja Run_RetraceTest_Headless_Parallel
        env:
          OPENENROTH_MM7_PATH: ${{github.workspace}}/OpenEnroth_GameData/mm7

      - name: '[android] List artifacts'
        if: matrix.platform == 'android'
        run: |
          find android/openenroth/build/outputs/apk

      - name: '[darwin] Prepare files for release'
        if: matrix.platform == 'darwin'
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          attempt_delay: 5000
          command: |
            mkdir -p dist
            cp -r build/src/Bin/OpenEnroth/OpenEnroth.app dist/
            hdiutil create OpenEnroth.dmg -ov -volname "OpenEnroth" -fs HFS+ -srcfolder dist

      - name: '[windows] Prepare files for release'
        if: matrix.platform == 'windows'
        run: |
          mkdir -p dist
          cp build/src/Bin/OpenEnroth/OpenEnroth.exe dist/
          cp build/src/Bin/OpenEnroth/OpenEnroth.pdb dist/

      - name: '[linux] Prepare files for release'
        if: matrix.platform == 'linux'
        run: |
          mkdir dist
          cp build/src/Bin/OpenEnroth/OpenEnroth dist/

      - name: '[darwin/windows/linux] Zip folder for release'
        if: matrix.platform != 'android' && inputs.releaseTag != ''
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: ${{runner.os}}_${{inputs.releaseTag}}_${{matrix.configuration}}_${{matrix.architecture}}.zip
          path: dist

      - name: '[darwin/windows/linux] Publish release'
        if: matrix.platform != 'android' && inputs.releaseTag != ''
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: '${{inputs.releaseTag}}'
          files: |
            ${{runner.os}}_${{inputs.releaseTag}}_${{matrix.configuration}}_${{matrix.architecture}}.zip

      - name: '[android] Publish release'
        if: matrix.platform == 'android' && inputs.releaseTag != ''
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: '${{inputs.releaseTag}}'
          files: |
            android/openenroth/build/outputs/apk/debug/openenroth-debug.apk
            android/openenroth/build/outputs/apk/release/openenroth-release.apk

      - name: '[darwin] Check dependencies'
        if: matrix.platform == 'darwin'
        run: |
          otool -L build/src/Bin/OpenEnroth/OpenEnroth.app/Contents/MacOS/OpenEnroth

      - name: '[windows] Check dependencies'
        if: matrix.platform == 'windows'
        run: |
          dumpbin -imports build/src/Bin/OpenEnroth/OpenEnroth.exe

      - name: '[linux] Check dependencies'
        if: matrix.platform == 'linux'
        run: |
          objdump -p build/src/Bin/OpenEnroth/OpenEnroth | grep 'NEEDED'

      - name: Cleanup ccache
        run: |
          ccache -c
