name: Linux Release Build

on:
  schedule:
    # schedule build every night
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
    tags:
      - '*'

env:
  TAG_NAME: "nightly"

jobs:
  build_linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        architecture: [x86, x64]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install dependencies
      run: |
        if [ "${{ matrix.architecture }}" = "x86" ]; then
          sudo dpkg --add-architecture i386
        fi
        sudo apt-get update
        if [ "${{ matrix.architecture }}" = "x86" ]; then
          sudo apt-get install -y gcc-12-multilib g++-12-multilib
          # missing dependency workaround
          sudo apt-get install -y libgcc-s1:i386 libstdc++6:i386 libatomic1:i386
          sudo apt-get install -y libavcodec58:i386 libavformat58:i386 libgomp1:i386
          sudo apt-get install -f libswresample3:i386
          # -
          sudo apt-get install -y libglu1-mesa-dev:i386 zlib1g-dev:i386
          sudo apt-get install -y libavformat-dev:i386 libavcodec-dev:i386 libswscale-dev:i386
          sudo apt-get install -y libopenal-dev:i386
          sudo apt-get install -y libsdl2-dev:i386
        fi
        if [ "${{ matrix.architecture }}" = "x64" ]; then
          sudo apt-get install -y gcc-12 g++-12
          sudo apt-get install -y libglu1-mesa-dev zlib1g-dev
          sudo apt-get install -y libavformat-dev libavcodec-dev libswscale-dev
          sudo apt-get install -y libopenal-dev
          sudo apt-get install -y libsdl2-dev
        fi

    - name: Configure
      run: |
        if [ "${{ matrix.architecture }}" = "x86" ]; then
          export CFLAGS="-m32" CXXFLAGS="-m32" 
        fi
        export CC=gcc-12 && export CXX=g++-12
        cmake -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DENABLE_TESTS=On

    - name: Build
      working-directory: build
      run: |
        make -j3

    - name: Tests
      working-directory: build
      run: |
        make UnitTest

    - name: Prepare artifact
      run: |
        mkdir dist
        cp build/OpenEnroth dist/
        cp -r resources/* dist/

    - name: Copy Shared libs
      run: |
        mkdir libs
        ldd build/OpenEnroth | grep '=> /' | awk '{print $3;}' | xargs -I '{}' cp -v '{}' ./libs/

    - name: Zip Folder For Release
      if: success() || failure()
      run: zip -r ./Linux_${{ env.TAG_NAME }}_${{ matrix.configuration }}_${{ matrix.architecture }}.zip dist

    - name: Publish Release
      if: success() || failure()	
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        tag_name: ${{ env.TAG_NAME }}
        files: ${{ runner.os }}_${{ env.TAG_NAME }}_${{ matrix.configuration }}_${{ matrix.architecture }}.zip
